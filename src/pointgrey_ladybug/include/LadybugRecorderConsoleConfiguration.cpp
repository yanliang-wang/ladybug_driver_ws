// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema
// to C++ data binding compiler, in the Proprietary License mode.
// You should have received a proprietary license from Code Synthesis
// Tools CC prior to generating this code. See the license text for
// conditions.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "LadybugRecorderConsoleConfiguration.h"

namespace LRCConfig
{
  // General
  // 


  // Camera
  // 

  const Camera::DataFormatType& Camera::
  getDataFormat () const
  {
    return this->DataFormat_.get ();
  }

  Camera::DataFormatType& Camera::
  getDataFormat ()
  {
    return this->DataFormat_.get ();
  }

  void Camera::
  setDataFormat (const DataFormatType& x)
  {
    this->DataFormat_.set (x);
  }

  void Camera::
  setDataFormat (::std::unique_ptr< DataFormatType > x)
  {
    this->DataFormat_.set (std::move (x));
  }

  const Camera::FrameRateType& Camera::
  getFrameRate () const
  {
    return this->FrameRate_.get ();
  }

  Camera::FrameRateType& Camera::
  getFrameRate ()
  {
    return this->FrameRate_.get ();
  }

  void Camera::
  setFrameRate (const FrameRateType& x)
  {
    this->FrameRate_.set (x);
  }

  const Camera::IsFrameRateAutoType& Camera::
  getIsFrameRateAuto () const
  {
    return this->IsFrameRateAuto_.get ();
  }

  Camera::IsFrameRateAutoType& Camera::
  getIsFrameRateAuto ()
  {
    return this->IsFrameRateAuto_.get ();
  }

  void Camera::
  setIsFrameRateAuto (const IsFrameRateAutoType& x)
  {
    this->IsFrameRateAuto_.set (x);
  }

  const Camera::JpegQualityPercentageType& Camera::
  getJpegQualityPercentage () const
  {
    return this->JpegQualityPercentage_.get ();
  }

  Camera::JpegQualityPercentageType& Camera::
  getJpegQualityPercentage ()
  {
    return this->JpegQualityPercentage_.get ();
  }

  void Camera::
  setJpegQualityPercentage (const JpegQualityPercentageType& x)
  {
    this->JpegQualityPercentage_.set (x);
  }

  void Camera::
  setJpegQualityPercentage (::std::unique_ptr< JpegQualityPercentageType > x)
  {
    this->JpegQualityPercentage_.set (std::move (x));
  }

  const Camera::IsJpegQualityAutoType& Camera::
  getIsJpegQualityAuto () const
  {
    return this->IsJpegQualityAuto_.get ();
  }

  Camera::IsJpegQualityAutoType& Camera::
  getIsJpegQualityAuto ()
  {
    return this->IsJpegQualityAuto_.get ();
  }

  void Camera::
  setIsJpegQualityAuto (const IsJpegQualityAutoType& x)
  {
    this->IsJpegQualityAuto_.set (x);
  }

  const Camera::JpegBufferPercentageType& Camera::
  getJpegBufferPercentage () const
  {
    return this->JpegBufferPercentage_.get ();
  }

  Camera::JpegBufferPercentageType& Camera::
  getJpegBufferPercentage ()
  {
    return this->JpegBufferPercentage_.get ();
  }

  void Camera::
  setJpegBufferPercentage (const JpegBufferPercentageType& x)
  {
    this->JpegBufferPercentage_.set (x);
  }

  void Camera::
  setJpegBufferPercentage (::std::unique_ptr< JpegBufferPercentageType > x)
  {
    this->JpegBufferPercentage_.set (std::move (x));
  }


  // GPS
  // 

  const GPS::UseGpsType& GPS::
  getUseGps () const
  {
    return this->UseGps_.get ();
  }

  GPS::UseGpsType& GPS::
  getUseGps ()
  {
    return this->UseGps_.get ();
  }

  void GPS::
  setUseGps (const UseGpsType& x)
  {
    this->UseGps_.set (x);
  }

  const GPS::PortType& GPS::
  getPort () const
  {
    return this->Port_.get ();
  }

  GPS::PortType& GPS::
  getPort ()
  {
    return this->Port_.get ();
  }

  void GPS::
  setPort (const PortType& x)
  {
    this->Port_.set (x);
  }

  const GPS::DeviceNameType& GPS::
  getDeviceName () const
  {
    return this->DeviceName_.get ();
  }

  GPS::DeviceNameType& GPS::
  getDeviceName ()
  {
    return this->DeviceName_.get ();
  }

  void GPS::
  setDeviceName (const DeviceNameType& x)
  {
    this->DeviceName_.set (x);
  }

  void GPS::
  setDeviceName (::std::unique_ptr< DeviceNameType > x)
  {
    this->DeviceName_.set (std::move (x));
  }

  const GPS::BaudRateType& GPS::
  getBaudRate () const
  {
    return this->BaudRate_.get ();
  }

  GPS::BaudRateType& GPS::
  getBaudRate ()
  {
    return this->BaudRate_.get ();
  }

  void GPS::
  setBaudRate (const BaudRateType& x)
  {
    this->BaudRate_.set (x);
  }

  const GPS::RefreshIntervalMsType& GPS::
  getRefreshIntervalMs () const
  {
    return this->RefreshIntervalMs_.get ();
  }

  GPS::RefreshIntervalMsType& GPS::
  getRefreshIntervalMs ()
  {
    return this->RefreshIntervalMs_.get ();
  }

  void GPS::
  setRefreshIntervalMs (const RefreshIntervalMsType& x)
  {
    this->RefreshIntervalMs_.set (x);
  }


  // Stream
  // 

  const Stream::DestinationDirectoryType& Stream::
  getDestinationDirectory () const
  {
    return this->DestinationDirectory_.get ();
  }

  Stream::DestinationDirectoryType& Stream::
  getDestinationDirectory ()
  {
    return this->DestinationDirectory_.get ();
  }

  void Stream::
  setDestinationDirectory (const DestinationDirectoryType& x)
  {
    this->DestinationDirectory_.set (x);
  }

  void Stream::
  setDestinationDirectory (::std::unique_ptr< DestinationDirectoryType > x)
  {
    this->DestinationDirectory_.set (std::move (x));
  }


  // Configuration
  // 

  const Configuration::GeneralType& Configuration::
  getGeneral () const
  {
    return this->General_.get ();
  }

  Configuration::GeneralType& Configuration::
  getGeneral ()
  {
    return this->General_.get ();
  }

  void Configuration::
  setGeneral (const GeneralType& x)
  {
    this->General_.set (x);
  }

  void Configuration::
  setGeneral (::std::unique_ptr< GeneralType > x)
  {
    this->General_.set (std::move (x));
  }

  const Configuration::CameraType& Configuration::
  getCamera () const
  {
    return this->Camera_.get ();
  }

  Configuration::CameraType& Configuration::
  getCamera ()
  {
    return this->Camera_.get ();
  }

  void Configuration::
  setCamera (const CameraType& x)
  {
    this->Camera_.set (x);
  }

  void Configuration::
  setCamera (::std::unique_ptr< CameraType > x)
  {
    this->Camera_.set (std::move (x));
  }

  const Configuration::GPSType& Configuration::
  getGPS () const
  {
    return this->GPS_.get ();
  }

  Configuration::GPSType& Configuration::
  getGPS ()
  {
    return this->GPS_.get ();
  }

  void Configuration::
  setGPS (const GPSType& x)
  {
    this->GPS_.set (x);
  }

  void Configuration::
  setGPS (::std::unique_ptr< GPSType > x)
  {
    this->GPS_.set (std::move (x));
  }

  const Configuration::StreamType& Configuration::
  getStream () const
  {
    return this->Stream_.get ();
  }

  Configuration::StreamType& Configuration::
  getStream ()
  {
    return this->Stream_.get ();
  }

  void Configuration::
  setStream (const StreamType& x)
  {
    this->Stream_.set (x);
  }

  void Configuration::
  setStream (::std::unique_ptr< StreamType > x)
  {
    this->Stream_.set (std::move (x));
  }


  // DataFormat
  // 

  DataFormat::
  DataFormat (Value v)
  : ::xml_schema::String (_xsd_DataFormat_literals_[v])
  {
  }

  DataFormat::
  DataFormat (const char* v)
  : ::xml_schema::String (v)
  {
  }

  DataFormat::
  DataFormat (const ::std::string& v)
  : ::xml_schema::String (v)
  {
  }

  DataFormat::
  DataFormat (const ::xml_schema::String& v)
  : ::xml_schema::String (v)
  {
  }

  DataFormat::
  DataFormat (const DataFormat& v,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::String (v, f, c)
  {
  }

  DataFormat& DataFormat::
  operator= (Value v)
  {
    static_cast< ::xml_schema::String& > (*this) = 
    ::xml_schema::String (_xsd_DataFormat_literals_[v]);

    return *this;
  }


  // JpegQualityPercentage
  // 


  // JpegBufferPercentage
  // 
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace LRCConfig
{
  // General
  //

  General::
  General ()
  : ::xml_schema::Type ()
  {
  }

  General::
  General (const General& x,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c)
  {
  }

  General::
  General (const xercesc::DOMElement& e,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f, c)
  {
  }

  General::
  General (const xercesc::DOMAttr& a,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
  : ::xml_schema::Type (a, f, c)
  {
  }

  General::
  General (const ::std::string& s,
           const xercesc::DOMElement* e,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
  : ::xml_schema::Type (s, e, f, c)
  {
  }

  General* General::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class General (*this, f, c);
  }

  General::
  ~General ()
  {
  }

  // Camera
  //

  Camera::
  Camera (const DataFormatType& DataFormat,
          const FrameRateType& FrameRate,
          const IsFrameRateAutoType& IsFrameRateAuto,
          const JpegQualityPercentageType& JpegQualityPercentage,
          const IsJpegQualityAutoType& IsJpegQualityAuto,
          const JpegBufferPercentageType& JpegBufferPercentage)
  : ::xml_schema::Type (),
    DataFormat_ (DataFormat, this),
    FrameRate_ (FrameRate, this),
    IsFrameRateAuto_ (IsFrameRateAuto, this),
    JpegQualityPercentage_ (JpegQualityPercentage, this),
    IsJpegQualityAuto_ (IsJpegQualityAuto, this),
    JpegBufferPercentage_ (JpegBufferPercentage, this)
  {
  }

  Camera::
  Camera (const Camera& x,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    DataFormat_ (x.DataFormat_, f, this),
    FrameRate_ (x.FrameRate_, f, this),
    IsFrameRateAuto_ (x.IsFrameRateAuto_, f, this),
    JpegQualityPercentage_ (x.JpegQualityPercentage_, f, this),
    IsJpegQualityAuto_ (x.IsJpegQualityAuto_, f, this),
    JpegBufferPercentage_ (x.JpegBufferPercentage_, f, this)
  {
  }

  Camera::
  Camera (const xercesc::DOMElement& e,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    DataFormat_ (this),
    FrameRate_ (this),
    IsFrameRateAuto_ (this),
    JpegQualityPercentage_ (this),
    IsJpegQualityAuto_ (this),
    JpegBufferPercentage_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Camera::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // DataFormat
      //
      if (n.name () == "DataFormat" && n.namespace_ () == "http://www.ptgrey.com")
      {
        ::std::unique_ptr< DataFormatType > r (
          DataFormatTraits::create (i, f, this));

        if (!DataFormat_.present ())
        {
          this->DataFormat_.set (::std::move (r));
          continue;
        }
      }

      // FrameRate
      //
      if (n.name () == "FrameRate" && n.namespace_ () == "http://www.ptgrey.com")
      {
        if (!FrameRate_.present ())
        {
          this->FrameRate_.set (FrameRateTraits::create (i, f, this));
          continue;
        }
      }

      // IsFrameRateAuto
      //
      if (n.name () == "IsFrameRateAuto" && n.namespace_ () == "http://www.ptgrey.com")
      {
        if (!IsFrameRateAuto_.present ())
        {
          this->IsFrameRateAuto_.set (IsFrameRateAutoTraits::create (i, f, this));
          continue;
        }
      }

      // JpegQualityPercentage
      //
      if (n.name () == "JpegQualityPercentage" && n.namespace_ () == "http://www.ptgrey.com")
      {
        ::std::unique_ptr< JpegQualityPercentageType > r (
          JpegQualityPercentageTraits::create (i, f, this));

        if (!JpegQualityPercentage_.present ())
        {
          this->JpegQualityPercentage_.set (::std::move (r));
          continue;
        }
      }

      // IsJpegQualityAuto
      //
      if (n.name () == "IsJpegQualityAuto" && n.namespace_ () == "http://www.ptgrey.com")
      {
        if (!IsJpegQualityAuto_.present ())
        {
          this->IsJpegQualityAuto_.set (IsJpegQualityAutoTraits::create (i, f, this));
          continue;
        }
      }

      // JpegBufferPercentage
      //
      if (n.name () == "JpegBufferPercentage" && n.namespace_ () == "http://www.ptgrey.com")
      {
        ::std::unique_ptr< JpegBufferPercentageType > r (
          JpegBufferPercentageTraits::create (i, f, this));

        if (!JpegBufferPercentage_.present ())
        {
          this->JpegBufferPercentage_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!DataFormat_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "DataFormat",
        "http://www.ptgrey.com");
    }

    if (!FrameRate_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "FrameRate",
        "http://www.ptgrey.com");
    }

    if (!IsFrameRateAuto_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "IsFrameRateAuto",
        "http://www.ptgrey.com");
    }

    if (!JpegQualityPercentage_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "JpegQualityPercentage",
        "http://www.ptgrey.com");
    }

    if (!IsJpegQualityAuto_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "IsJpegQualityAuto",
        "http://www.ptgrey.com");
    }

    if (!JpegBufferPercentage_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "JpegBufferPercentage",
        "http://www.ptgrey.com");
    }
  }

  Camera* Camera::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Camera (*this, f, c);
  }

  Camera& Camera::
  operator= (const Camera& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->DataFormat_ = x.DataFormat_;
      this->FrameRate_ = x.FrameRate_;
      this->IsFrameRateAuto_ = x.IsFrameRateAuto_;
      this->JpegQualityPercentage_ = x.JpegQualityPercentage_;
      this->IsJpegQualityAuto_ = x.IsJpegQualityAuto_;
      this->JpegBufferPercentage_ = x.JpegBufferPercentage_;
    }

    return *this;
  }

  Camera::
  ~Camera ()
  {
  }

  // GPS
  //

  GPS::
  GPS (const UseGpsType& UseGps,
       const PortType& Port,
       const DeviceNameType& DeviceName,
       const BaudRateType& BaudRate,
       const RefreshIntervalMsType& RefreshIntervalMs)
  : ::xml_schema::Type (),
    UseGps_ (UseGps, this),
    Port_ (Port, this),
    DeviceName_ (DeviceName, this),
    BaudRate_ (BaudRate, this),
    RefreshIntervalMs_ (RefreshIntervalMs, this)
  {
  }

  GPS::
  GPS (const GPS& x,
       ::xml_schema::Flags f,
       ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    UseGps_ (x.UseGps_, f, this),
    Port_ (x.Port_, f, this),
    DeviceName_ (x.DeviceName_, f, this),
    BaudRate_ (x.BaudRate_, f, this),
    RefreshIntervalMs_ (x.RefreshIntervalMs_, f, this)
  {
  }

  GPS::
  GPS (const xercesc::DOMElement& e,
       ::xml_schema::Flags f,
       ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    UseGps_ (this),
    Port_ (this),
    DeviceName_ (this),
    BaudRate_ (this),
    RefreshIntervalMs_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void GPS::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // UseGps
      //
      if (n.name () == "UseGps" && n.namespace_ () == "http://www.ptgrey.com")
      {
        if (!UseGps_.present ())
        {
          this->UseGps_.set (UseGpsTraits::create (i, f, this));
          continue;
        }
      }

      // Port
      //
      if (n.name () == "Port" && n.namespace_ () == "http://www.ptgrey.com")
      {
        if (!Port_.present ())
        {
          this->Port_.set (PortTraits::create (i, f, this));
          continue;
        }
      }

      // DeviceName
      //
      if (n.name () == "DeviceName" && n.namespace_ () == "http://www.ptgrey.com")
      {
        ::std::unique_ptr< DeviceNameType > r (
          DeviceNameTraits::create (i, f, this));

        if (!DeviceName_.present ())
        {
          this->DeviceName_.set (::std::move (r));
          continue;
        }
      }

      // BaudRate
      //
      if (n.name () == "BaudRate" && n.namespace_ () == "http://www.ptgrey.com")
      {
        if (!BaudRate_.present ())
        {
          this->BaudRate_.set (BaudRateTraits::create (i, f, this));
          continue;
        }
      }

      // RefreshIntervalMs
      //
      if (n.name () == "RefreshIntervalMs" && n.namespace_ () == "http://www.ptgrey.com")
      {
        if (!RefreshIntervalMs_.present ())
        {
          this->RefreshIntervalMs_.set (RefreshIntervalMsTraits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!UseGps_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "UseGps",
        "http://www.ptgrey.com");
    }

    if (!Port_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Port",
        "http://www.ptgrey.com");
    }

    if (!DeviceName_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "DeviceName",
        "http://www.ptgrey.com");
    }

    if (!BaudRate_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "BaudRate",
        "http://www.ptgrey.com");
    }

    if (!RefreshIntervalMs_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "RefreshIntervalMs",
        "http://www.ptgrey.com");
    }
  }

  GPS* GPS::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class GPS (*this, f, c);
  }

  GPS& GPS::
  operator= (const GPS& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->UseGps_ = x.UseGps_;
      this->Port_ = x.Port_;
      this->DeviceName_ = x.DeviceName_;
      this->BaudRate_ = x.BaudRate_;
      this->RefreshIntervalMs_ = x.RefreshIntervalMs_;
    }

    return *this;
  }

  GPS::
  ~GPS ()
  {
  }

  // Stream
  //

  Stream::
  Stream (const DestinationDirectoryType& DestinationDirectory)
  : ::xml_schema::Type (),
    DestinationDirectory_ (DestinationDirectory, this)
  {
  }

  Stream::
  Stream (const Stream& x,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    DestinationDirectory_ (x.DestinationDirectory_, f, this)
  {
  }

  Stream::
  Stream (const xercesc::DOMElement& e,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    DestinationDirectory_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Stream::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // DestinationDirectory
      //
      if (n.name () == "DestinationDirectory" && n.namespace_ () == "http://www.ptgrey.com")
      {
        ::std::unique_ptr< DestinationDirectoryType > r (
          DestinationDirectoryTraits::create (i, f, this));

        if (!DestinationDirectory_.present ())
        {
          this->DestinationDirectory_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!DestinationDirectory_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "DestinationDirectory",
        "http://www.ptgrey.com");
    }
  }

  Stream* Stream::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Stream (*this, f, c);
  }

  Stream& Stream::
  operator= (const Stream& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->DestinationDirectory_ = x.DestinationDirectory_;
    }

    return *this;
  }

  Stream::
  ~Stream ()
  {
  }

  // Configuration
  //

  Configuration::
  Configuration (const GeneralType& General,
                 const CameraType& Camera,
                 const GPSType& GPS,
                 const StreamType& Stream)
  : ::xml_schema::Type (),
    General_ (General, this),
    Camera_ (Camera, this),
    GPS_ (GPS, this),
    Stream_ (Stream, this)
  {
  }

  Configuration::
  Configuration (const GeneralType& General,
                 ::std::unique_ptr< CameraType > Camera,
                 ::std::unique_ptr< GPSType > GPS,
                 ::std::unique_ptr< StreamType > Stream)
  : ::xml_schema::Type (),
    General_ (General, this),
    Camera_ (std::move (Camera), this),
    GPS_ (std::move (GPS), this),
    Stream_ (std::move (Stream), this)
  {
  }

  Configuration::
  Configuration (const Configuration& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    General_ (x.General_, f, this),
    Camera_ (x.Camera_, f, this),
    GPS_ (x.GPS_, f, this),
    Stream_ (x.Stream_, f, this)
  {
  }

  Configuration::
  Configuration (const xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    General_ (this),
    Camera_ (this),
    GPS_ (this),
    Stream_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Configuration::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // General
      //
      if (n.name () == "General" && n.namespace_ () == "http://www.ptgrey.com")
      {
        ::std::unique_ptr< GeneralType > r (
          GeneralTraits::create (i, f, this));

        if (!General_.present ())
        {
          this->General_.set (::std::move (r));
          continue;
        }
      }

      // Camera
      //
      if (n.name () == "Camera" && n.namespace_ () == "http://www.ptgrey.com")
      {
        ::std::unique_ptr< CameraType > r (
          CameraTraits::create (i, f, this));

        if (!Camera_.present ())
        {
          this->Camera_.set (::std::move (r));
          continue;
        }
      }

      // GPS
      //
      if (n.name () == "GPS" && n.namespace_ () == "http://www.ptgrey.com")
      {
        ::std::unique_ptr< GPSType > r (
          GPSTraits::create (i, f, this));

        if (!GPS_.present ())
        {
          this->GPS_.set (::std::move (r));
          continue;
        }
      }

      // Stream
      //
      if (n.name () == "Stream" && n.namespace_ () == "http://www.ptgrey.com")
      {
        ::std::unique_ptr< StreamType > r (
          StreamTraits::create (i, f, this));

        if (!Stream_.present ())
        {
          this->Stream_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!General_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "General",
        "http://www.ptgrey.com");
    }

    if (!Camera_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Camera",
        "http://www.ptgrey.com");
    }

    if (!GPS_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "GPS",
        "http://www.ptgrey.com");
    }

    if (!Stream_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Stream",
        "http://www.ptgrey.com");
    }
  }

  Configuration* Configuration::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Configuration (*this, f, c);
  }

  Configuration& Configuration::
  operator= (const Configuration& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->General_ = x.General_;
      this->Camera_ = x.Camera_;
      this->GPS_ = x.GPS_;
      this->Stream_ = x.Stream_;
    }

    return *this;
  }

  Configuration::
  ~Configuration ()
  {
  }

  // DataFormat
  //

  DataFormat::
  DataFormat (const xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::String (e, f, c)
  {
    _xsd_DataFormat_convert ();
  }

  DataFormat::
  DataFormat (const xercesc::DOMAttr& a,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::String (a, f, c)
  {
    _xsd_DataFormat_convert ();
  }

  DataFormat::
  DataFormat (const ::std::string& s,
              const xercesc::DOMElement* e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::String (s, e, f, c)
  {
    _xsd_DataFormat_convert ();
  }

  DataFormat* DataFormat::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class DataFormat (*this, f, c);
  }

  DataFormat::Value DataFormat::
  _xsd_DataFormat_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_DataFormat_literals_);
    const Value* i (::std::lower_bound (
                      _xsd_DataFormat_indexes_,
                      _xsd_DataFormat_indexes_ + 11,
                      *this,
                      c));

    if (i == _xsd_DataFormat_indexes_ + 11 || _xsd_DataFormat_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const DataFormat::
  _xsd_DataFormat_literals_[11] =
  {
    "LADYBUG_DATAFORMAT_RAW8",
    "LADYBUG_DATAFORMAT_HALF_HEIGHT_RAW8",
    "LADYBUG_DATAFORMAT_RAW12",
    "LADYBUG_DATAFORMAT_HALF_HEIGHT_RAW12",
    "LADYBUG_DATAFORMAT_RAW16",
    "LADYBUG_DATAFORMAT_HALF_HEIGHT_RAW16",
    "LADYBUG_DATAFORMAT_COLOR_SEP_JPEG8",
    "LADYBUG_DATAFORMAT_COLOR_SEP_HALF_HEIGHT_JPEG8",
    "LADYBUG_DATAFORMAT_COLOR_SEP_JPEG12",
    "LADYBUG_DATAFORMAT_COLOR_SEP_HALF_HEIGHT_JPEG12",
    "LADYBUG_DATAFORMAT_ANY"
  };

  const DataFormat::Value DataFormat::
  _xsd_DataFormat_indexes_[11] =
  {
    ::LRCConfig::DataFormat::LADYBUG_DATAFORMAT_ANY,
    ::LRCConfig::DataFormat::LADYBUG_DATAFORMAT_COLOR_SEP_HALF_HEIGHT_JPEG12,
    ::LRCConfig::DataFormat::LADYBUG_DATAFORMAT_COLOR_SEP_HALF_HEIGHT_JPEG8,
    ::LRCConfig::DataFormat::LADYBUG_DATAFORMAT_COLOR_SEP_JPEG12,
    ::LRCConfig::DataFormat::LADYBUG_DATAFORMAT_COLOR_SEP_JPEG8,
    ::LRCConfig::DataFormat::LADYBUG_DATAFORMAT_HALF_HEIGHT_RAW12,
    ::LRCConfig::DataFormat::LADYBUG_DATAFORMAT_HALF_HEIGHT_RAW16,
    ::LRCConfig::DataFormat::LADYBUG_DATAFORMAT_HALF_HEIGHT_RAW8,
    ::LRCConfig::DataFormat::LADYBUG_DATAFORMAT_RAW12,
    ::LRCConfig::DataFormat::LADYBUG_DATAFORMAT_RAW16,
    ::LRCConfig::DataFormat::LADYBUG_DATAFORMAT_RAW8
  };

  // JpegQualityPercentage
  //

  JpegQualityPercentage::
  JpegQualityPercentage (const ::xml_schema::UnsignedInt& _xsd_UnsignedInt_base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType > (_xsd_UnsignedInt_base)
  {
  }

  JpegQualityPercentage::
  JpegQualityPercentage (const JpegQualityPercentage& x,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType > (x, f, c)
  {
  }

  JpegQualityPercentage::
  JpegQualityPercentage (const xercesc::DOMElement& e,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType > (e, f, c)
  {
  }

  JpegQualityPercentage::
  JpegQualityPercentage (const xercesc::DOMAttr& a,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType > (a, f, c)
  {
  }

  JpegQualityPercentage::
  JpegQualityPercentage (const ::std::string& s,
                         const xercesc::DOMElement* e,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType > (s, e, f, c)
  {
  }

  JpegQualityPercentage* JpegQualityPercentage::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class JpegQualityPercentage (*this, f, c);
  }

  JpegQualityPercentage::
  ~JpegQualityPercentage ()
  {
  }

  // JpegBufferPercentage
  //

  JpegBufferPercentage::
  JpegBufferPercentage (const ::xml_schema::UnsignedInt& _xsd_UnsignedInt_base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType > (_xsd_UnsignedInt_base)
  {
  }

  JpegBufferPercentage::
  JpegBufferPercentage (const JpegBufferPercentage& x,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType > (x, f, c)
  {
  }

  JpegBufferPercentage::
  JpegBufferPercentage (const xercesc::DOMElement& e,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType > (e, f, c)
  {
  }

  JpegBufferPercentage::
  JpegBufferPercentage (const xercesc::DOMAttr& a,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType > (a, f, c)
  {
  }

  JpegBufferPercentage::
  JpegBufferPercentage (const ::std::string& s,
                        const xercesc::DOMElement* e,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType > (s, e, f, c)
  {
  }

  JpegBufferPercentage* JpegBufferPercentage::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class JpegBufferPercentage (*this, f, c);
  }

  JpegBufferPercentage::
  ~JpegBufferPercentage ()
  {
  }
}

#include <ostream>

namespace LRCConfig
{
  ::std::ostream&
  operator<< (::std::ostream& o, const General&)
  {
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const Camera& i)
  {
    o << ::std::endl << "DataFormat: " << i.getDataFormat ();
    o << ::std::endl << "FrameRate: " << i.getFrameRate ();
    o << ::std::endl << "IsFrameRateAuto: " << i.getIsFrameRateAuto ();
    o << ::std::endl << "JpegQualityPercentage: " << i.getJpegQualityPercentage ();
    o << ::std::endl << "IsJpegQualityAuto: " << i.getIsJpegQualityAuto ();
    o << ::std::endl << "JpegBufferPercentage: " << i.getJpegBufferPercentage ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const GPS& i)
  {
    o << ::std::endl << "UseGps: " << i.getUseGps ();
    o << ::std::endl << "Port: " << i.getPort ();
    o << ::std::endl << "DeviceName: " << i.getDeviceName ();
    o << ::std::endl << "BaudRate: " << i.getBaudRate ();
    o << ::std::endl << "RefreshIntervalMs: " << i.getRefreshIntervalMs ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const Stream& i)
  {
    o << ::std::endl << "DestinationDirectory: " << i.getDestinationDirectory ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const Configuration& i)
  {
    o << ::std::endl << "General: " << i.getGeneral ();
    o << ::std::endl << "Camera: " << i.getCamera ();
    o << ::std::endl << "GPS: " << i.getGPS ();
    o << ::std::endl << "Stream: " << i.getStream ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, DataFormat::Value i)
  {
    return o << DataFormat::_xsd_DataFormat_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const DataFormat& i)
  {
    return o << static_cast< const ::xml_schema::String& > (i);
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const JpegQualityPercentage& i)
  {
    o << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType >& > (i);

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const JpegBufferPercentage& i)
  {
    o << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType >& > (i);

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace LRCConfig
{
  ::std::unique_ptr< ::LRCConfig::Configuration >
  parseConfiguration (const ::std::string& u,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::LRCConfig::Configuration > (
      ::LRCConfig::parseConfiguration (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::LRCConfig::Configuration >
  parseConfiguration (const ::std::string& u,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::LRCConfig::Configuration > (
      ::LRCConfig::parseConfiguration (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::LRCConfig::Configuration >
  parseConfiguration (const ::std::string& u,
                      xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::LRCConfig::Configuration > (
      ::LRCConfig::parseConfiguration (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::LRCConfig::Configuration >
  parseConfiguration (::std::istream& is,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::LRCConfig::parseConfiguration (isrc, f, p);
  }

  ::std::unique_ptr< ::LRCConfig::Configuration >
  parseConfiguration (::std::istream& is,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::LRCConfig::parseConfiguration (isrc, h, f, p);
  }

  ::std::unique_ptr< ::LRCConfig::Configuration >
  parseConfiguration (::std::istream& is,
                      xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::LRCConfig::parseConfiguration (isrc, h, f, p);
  }

  ::std::unique_ptr< ::LRCConfig::Configuration >
  parseConfiguration (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::LRCConfig::parseConfiguration (isrc, f, p);
  }

  ::std::unique_ptr< ::LRCConfig::Configuration >
  parseConfiguration (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::LRCConfig::parseConfiguration (isrc, h, f, p);
  }

  ::std::unique_ptr< ::LRCConfig::Configuration >
  parseConfiguration (::std::istream& is,
                      const ::std::string& sid,
                      xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::LRCConfig::parseConfiguration (isrc, h, f, p);
  }

  ::std::unique_ptr< ::LRCConfig::Configuration >
  parseConfiguration (xercesc::InputSource& i,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::LRCConfig::Configuration > (
      ::LRCConfig::parseConfiguration (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::LRCConfig::Configuration >
  parseConfiguration (xercesc::InputSource& i,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::LRCConfig::Configuration > (
      ::LRCConfig::parseConfiguration (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::LRCConfig::Configuration >
  parseConfiguration (xercesc::InputSource& i,
                      xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::LRCConfig::Configuration > (
      ::LRCConfig::parseConfiguration (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::LRCConfig::Configuration >
  parseConfiguration (const xercesc::DOMDocument& doc,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< xercesc::DOMDocument > d (
        static_cast< xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::LRCConfig::Configuration > (
        ::LRCConfig::parseConfiguration (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Configuration" &&
        n.namespace_ () == "http://www.ptgrey.com")
    {
      ::std::unique_ptr< ::LRCConfig::Configuration > r (
        ::xsd::cxx::tree::traits< ::LRCConfig::Configuration, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Configuration",
      "http://www.ptgrey.com");
  }

  ::std::unique_ptr< ::LRCConfig::Configuration >
  parseConfiguration (::xml_schema::dom::unique_ptr< xercesc::DOMDocument > d,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::treeNodeKey,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Configuration" &&
        n.namespace_ () == "http://www.ptgrey.com")
    {
      ::std::unique_ptr< ::LRCConfig::Configuration > r (
        ::xsd::cxx::tree::traits< ::LRCConfig::Configuration, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Configuration",
      "http://www.ptgrey.com");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace LRCConfig
{
  void
  serializeConfiguration (::std::ostream& o,
                          const ::LRCConfig::Configuration& s,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< xercesc::DOMDocument > d (
      ::LRCConfig::serializeConfiguration (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serializeConfiguration (::std::ostream& o,
                          const ::LRCConfig::Configuration& s,
                          ::xml_schema::ErrorHandler& h,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< xercesc::DOMDocument > d (
      ::LRCConfig::serializeConfiguration (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeConfiguration (::std::ostream& o,
                          const ::LRCConfig::Configuration& s,
                          xercesc::DOMErrorHandler& h,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< xercesc::DOMDocument > d (
      ::LRCConfig::serializeConfiguration (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeConfiguration (xercesc::XMLFormatTarget& t,
                          const ::LRCConfig::Configuration& s,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< xercesc::DOMDocument > d (
      ::LRCConfig::serializeConfiguration (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serializeConfiguration (xercesc::XMLFormatTarget& t,
                          const ::LRCConfig::Configuration& s,
                          ::xml_schema::ErrorHandler& h,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< xercesc::DOMDocument > d (
      ::LRCConfig::serializeConfiguration (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeConfiguration (xercesc::XMLFormatTarget& t,
                          const ::LRCConfig::Configuration& s,
                          xercesc::DOMErrorHandler& h,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< xercesc::DOMDocument > d (
      ::LRCConfig::serializeConfiguration (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeConfiguration (xercesc::DOMDocument& d,
                          const ::LRCConfig::Configuration& s,
                          ::xml_schema::Flags)
  {
    xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Configuration" &&
        n.namespace_ () == "http://www.ptgrey.com")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Configuration",
        "http://www.ptgrey.com");
    }
  }

  ::xml_schema::dom::unique_ptr< xercesc::DOMDocument >
  serializeConfiguration (const ::LRCConfig::Configuration& s,
                          const ::xml_schema::NamespaceInfomap& m,
                          ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "Configuration",
        "http://www.ptgrey.com",
        m, f));

    ::LRCConfig::serializeConfiguration (*d, s, f);
    return d;
  }

  void
  operator<< (xercesc::DOMElement& e, const General& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);
  }

  void
  operator<< (xercesc::DOMAttr&, const General&)
  {
  }

  void
  operator<< (::xml_schema::ListStream&,
              const General&)
  {
  }

  void
  operator<< (xercesc::DOMElement& e, const Camera& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // DataFormat
    //
    {
      xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "DataFormat",
          "http://www.ptgrey.com",
          e));

      s << i.getDataFormat ();
    }

    // FrameRate
    //
    {
      xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "FrameRate",
          "http://www.ptgrey.com",
          e));

      s << i.getFrameRate ();
    }

    // IsFrameRateAuto
    //
    {
      xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "IsFrameRateAuto",
          "http://www.ptgrey.com",
          e));

      s << i.getIsFrameRateAuto ();
    }

    // JpegQualityPercentage
    //
    {
      xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "JpegQualityPercentage",
          "http://www.ptgrey.com",
          e));

      s << i.getJpegQualityPercentage ();
    }

    // IsJpegQualityAuto
    //
    {
      xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "IsJpegQualityAuto",
          "http://www.ptgrey.com",
          e));

      s << i.getIsJpegQualityAuto ();
    }

    // JpegBufferPercentage
    //
    {
      xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "JpegBufferPercentage",
          "http://www.ptgrey.com",
          e));

      s << i.getJpegBufferPercentage ();
    }
  }

  void
  operator<< (xercesc::DOMElement& e, const GPS& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // UseGps
    //
    {
      xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "UseGps",
          "http://www.ptgrey.com",
          e));

      s << i.getUseGps ();
    }

    // Port
    //
    {
      xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Port",
          "http://www.ptgrey.com",
          e));

      s << i.getPort ();
    }

    // DeviceName
    //
    {
      xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "DeviceName",
          "http://www.ptgrey.com",
          e));

      s << i.getDeviceName ();
    }

    // BaudRate
    //
    {
      xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "BaudRate",
          "http://www.ptgrey.com",
          e));

      s << i.getBaudRate ();
    }

    // RefreshIntervalMs
    //
    {
      xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "RefreshIntervalMs",
          "http://www.ptgrey.com",
          e));

      s << i.getRefreshIntervalMs ();
    }
  }

  void
  operator<< (xercesc::DOMElement& e, const Stream& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // DestinationDirectory
    //
    {
      xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "DestinationDirectory",
          "http://www.ptgrey.com",
          e));

      s << i.getDestinationDirectory ();
    }
  }

  void
  operator<< (xercesc::DOMElement& e, const Configuration& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // General
    //
    {
      xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "General",
          "http://www.ptgrey.com",
          e));

      s << i.getGeneral ();
    }

    // Camera
    //
    {
      xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Camera",
          "http://www.ptgrey.com",
          e));

      s << i.getCamera ();
    }

    // GPS
    //
    {
      xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GPS",
          "http://www.ptgrey.com",
          e));

      s << i.getGPS ();
    }

    // Stream
    //
    {
      xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Stream",
          "http://www.ptgrey.com",
          e));

      s << i.getStream ();
    }
  }

  void
  operator<< (xercesc::DOMElement& e, const DataFormat& i)
  {
    e << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (xercesc::DOMAttr& a, const DataFormat& i)
  {
    a << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const DataFormat& i)
  {
    l << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (xercesc::DOMElement& e, const JpegQualityPercentage& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType >& > (i);
  }

  void
  operator<< (xercesc::DOMAttr& a, const JpegQualityPercentage& i)
  {
    a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType >& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const JpegQualityPercentage& i)
  {
    l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType >& > (i);
  }

  void
  operator<< (xercesc::DOMElement& e, const JpegBufferPercentage& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType >& > (i);
  }

  void
  operator<< (xercesc::DOMAttr& a, const JpegBufferPercentage& i)
  {
    a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType >& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const JpegBufferPercentage& i)
  {
    l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType >& > (i);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

